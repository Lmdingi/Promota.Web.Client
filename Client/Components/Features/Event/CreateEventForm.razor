@inject IEventService _eventService
@inject ILogger<CreateEventForm> _logger
@inject IJSRuntime JS

<EditForm Model="@_eventModel" OnValidSubmit="OnCreateEvent">
    <DataAnnotationsValidator />

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>
    }
    
    <CascadingValue Value="_eventModel" Name="_eventModel">
        <EventBasicInfo @ref="_eventBasicInfo"></EventBasicInfo>
    </CascadingValue>


    <div class="d-grid">
        <AuthorizeView Context="authContext" Policy="EmailVerifiedOnly">
            <Authorized>
                <button type="submit" class="btn btn-success btn-lg">Promote Event</button>
            </Authorized>
            <NotAuthorized>
                <button type="button" class="btn btn-secondary btn-lg" disabled>Promote Event</button>
                <a href="/account/verify" class="btn btn-outline-danger mt-2">
                    Please verify your account to promote events
                </a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<Alert?> OnAlertChanged { get; set; }

    private Event _eventModel = new Event();
    private EventBasicInfo _eventBasicInfo;
    private string _errorMessage = string.Empty;

    private async Task OnCreateEvent()
    {
        try
        {
            _eventBasicInfo.UseUpdatedValues();
            string? EventId = await _eventService.CreatEventAsync(_eventModel);

            if (!string.IsNullOrWhiteSpace(EventId))
            {
                await OnAlertChanged.InvokeAsync(new Alert("Event Successful", "You have Created Event successfully.", AlertType.Success));
                Event newEvent = new Event();
                _eventModel = newEvent;
            }
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogError(ex, "API error in CreateEvent");
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Client logic error in CreateEvent");
            _errorMessage = "Create event failed: An unexpected error occurred.";
        }

        await JS.InvokeVoidAsync("scrollToTop");
    }


}