@inject IJSRuntime JS

<div class="mx-auto bg-white p-8 rounded-lg shadow-sm border mb-3">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Media</h1>

    <!-- Thumbnail Upload -->
    <div class="mt-6">
        <label class="block text-gray-700 font-semibold mb-2">Event Thumbnail</label>
        <InputFile OnChange="HandleFileSelected" />

        @if (!string.IsNullOrEmpty(ThumbnailPreviewUrl))
        {
            <div class="mt-3 flex justify-center relative">
                <div class="w-32 aspect-[1/1] overflow-hidden rounded-lg shadow border relative">
                    <img src="@ThumbnailPreviewUrl"
                         class="w-full h-full object-cover"
                         alt="Thumbnail Preview" />
                    <button @onclick="RemoveThumbnail" type="button"
                            class="absolute top-1 right-1 bg-white/80 hover:bg-red-500 text-red-600 hover:text-white rounded-full p-1 text-xs shadow">
                        ✕
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Cover Image Upload -->
    <div class="mt-6">
        <label class="block text-gray-700 font-semibold mb-2">Event Cover Image (Banner)</label>
        <InputFile OnChange="HandleCoverImageSelected" />

        @if (!string.IsNullOrEmpty(CoverImagePreviewUrl))
        {
            <div class="mt-3 flex justify-center relative">
                <div class="w-full max-w-2xl aspect-[16/9] overflow-hidden rounded-lg shadow border relative">
                    <img src="@CoverImagePreviewUrl"
                         class="w-full h-full object-cover"
                         alt="Cover Image Preview" />
                    <button @onclick="RemoveCoverImage" type="button"
                            class="absolute top-1 right-1 bg-white/80 hover:bg-red-500 text-red-600 hover:text-white rounded-full p-1 text-xs shadow">
                        ✕
                    </button>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public MediaModel? Media { get; set; }

    private string? ThumbnailPreviewUrl;
    private string? CoverImagePreviewUrl;
    private IBrowserFile? selectedThumbnailFile;
    private IBrowserFile? selectedCoverFile;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initQuill");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedThumbnailFile = e.File;

        var buffer = new byte[selectedThumbnailFile.Size];
        await selectedThumbnailFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5).ReadAsync(buffer); // 5MB max

        ThumbnailPreviewUrl = $"data:{selectedThumbnailFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        Media!.ThumbnailImageBase64 = Convert.ToBase64String(buffer);
    }

    private async Task HandleCoverImageSelected(InputFileChangeEventArgs e)
    {
        selectedCoverFile = e.File;

        var buffer = new byte[selectedCoverFile.Size];
        await selectedCoverFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).ReadAsync(buffer); // 10MB max

        CoverImagePreviewUrl = $"data:{selectedCoverFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        Media!.CoverImageBase64 = Convert.ToBase64String(buffer);
    }

    private void RemoveThumbnail()
    {
        ThumbnailPreviewUrl = null;
        selectedThumbnailFile = null;
        if (Media != null)
        {
            Media.ThumbnailImageBase64 = null;
        }
    }

    private void RemoveCoverImage()
    {
        CoverImagePreviewUrl = null;
        selectedCoverFile = null;
        if (Media != null)
        {
            Media.CoverImageBase64 = null;
        }
    }
}
