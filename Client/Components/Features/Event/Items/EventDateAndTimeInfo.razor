<div class=" mx-auto bg-white p-8 rounded-lg shadow-sm border-1 mb-3">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Date & Time</h1>

    <!-- Timezone Selector -->
    <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-1">Select Time Zone</label>
        <select class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind="Event.TimeZone">
            @foreach (var tz in _timeZones)
            {
                <option value="@tz.Id">@tz.DisplayName</option>
            }
        </select>
    </div>

    <!-- Start Date & Time -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
            <InputDate @bind-Value="Event.StartDate"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" />
            <ValidationMessage For="@(() => Event.StartDate)" class="text-red-500 text-sm mt-1" />
        </div>

        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
            <InputText @bind-Value="_startTime" type="time" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" />
        </div>
    </div>

    <!-- Toggle End Date & Time -->
    <div class="flex items-center gap-2 mb-6">
        <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" id="endDateToggle" class="sr-only peer" @bind="_hasEndDate" />
            <div class="w-11 h-6 bg-gray-300 peer-focus:outline-none rounded-full peer peer-checked:bg-pink-500 transition-all duration-200"></div>
            <div class="absolute left-0.5 top-0.5 w-5 h-5 bg-white rounded-full transition-transform duration-200 transform peer-checked:translate-x-full"></div>
        </label>
        <label for="endDateToggle" class="text-sm font-medium text-gray-700">
            Add End Date &amp; Time
        </label>
    </div>

    
    @if (_hasEndDate)
    {
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                <InputDate @bind-Value="Event.EndDate" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" />
                <ValidationMessage For="@(() => Event.EndDate)" class="text-red-500 text-sm mt-1" />
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">End Time</label>
                <InputText @bind-Value="_endTime" type="time" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Event? Event { get; set; }

    private string _startTime = "08:00";
    private bool _hasEndDate = false;
    private string _endTime = "17:00";
    private List<TimeZoneInfo> _timeZones;

    protected override void OnInitialized()
    {
        _timeZones = TimeZoneInfo.GetSystemTimeZones().ToList();
    }

    public void UseUpdatedValues()
    {
        Event.StartDate = CombineDateAndTime(Event.StartDate, _startTime);
       
        if (_hasEndDate && Event.EndDate != null)
        {
            Event.EndDate = CombineDateAndTime((DateTime)Event.EndDate, _endTime);
        }
        else
        {
            Event.EndDate = null;
        }
    }

    private DateTime CombineDateAndTime(DateTime date, string time)
    {
        if (TimeSpan.TryParse(time, out var timeSpan))
        {
            return date.Date + timeSpan;
        }
        else
        {
            throw new FormatException("Invalid time format. Use HH:mm or HH:mm:ss.");
        }
    }
}
