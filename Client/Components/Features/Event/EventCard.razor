@using System.Text.RegularExpressions
@using System.Text.Json
@inject ILogger<EventCard> _logger
@inject IEventService _eventService
@inject IUserService _userService
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject NavigationManager _navigationManager

<style>
    .ticket-link-hover:hover {
        color: orange !important;
    }
</style>

<div class="card shadow-lg mb-4 border-0 rounded-4">
    @if (_currentUser != null && _currentUser.Id == Event.Creator.Id)
    {
        <div class="position-absolute top-0 start-0 w-100" style="height: 4px; background-color: #0d6efd; border-top-left-radius: .5rem; border-top-right-radius: .5rem;"></div>
    }
    <div class="card-body">
        <div class="d-flex justify-content-between">
            <div class="d-flex">
                <div class="me-3">
                    <div class="bg-light border rounded" style="width: 100px; height: 100px;">
                        <i class="bi bi-image" style="font-size: 2rem; color: gray;"></i>
                    </div>
                </div>

                <div>
                    @* user name *@
                    <small class="text-muted fw-bold">@Event.Creator.UserName</small>
                    @* rating *@
                    <div>
                        @for (int i = 0; i < rating; i++)
                        {
                            <i class="bi bi-star-fill text-warning"></i>
                        }
                        @for (int i = rating; i < 5; i++)
                        {
                            <i class="bi bi-star text-muted"></i>
                        }
                    </div>
                    @* event title *@
                    <h5 class="fw-bold mt-1 mb-0">@Event.Title</h5>

                    <small class="text-muted">
                        @* date *@
                        @Event.StartDate.ToString("dddd, dd MMMM yyyy hh:mm tt") @_timeZone •

                        @* location *@
                        @if (Event.IsRomote)
                        {
                            <i class="fas fa-globe" title="Online"></i>
                            <a href="@Event.RemoteLink" style="text-decoration:none">Remote </a>
                        }

                        @if (!string.IsNullOrWhiteSpace(Event.PhysicalLocation))
                        {
                            <i class="bi bi-geo-alt-fill"></i> @(" " + Event.PhysicalLocation)
                        }                        
                    </small>

                    @* fee *@
                    <div class="fw-bold text-success mt-1">
                        @if(Event.Price != 0)
                        {
                            <a href="@Event.TicketLink"
                               class="fw-bold text-success mt-1 @(string.IsNullOrWhiteSpace(Event.TicketLink) ? "" : "ticket-link-hover")"
                               style="text-decoration:none">
                                @(Event.Currency + " " + Event.Price.ToString("F2"))
                            </a>
                        }
                        else
                        {
                            <a href="@Event.TicketLink"
                               class="fw-bold text-success mt-1 @(string.IsNullOrWhiteSpace(Event.TicketLink) ? "" : "ticket-link-hover")"
                               style="text-decoration:none">
                                Free
                            </a>
                        }
                    </div>
                </div>
            </div>
            <div class="text-end">
                @if (_currentUser != null && _currentUser.Id == Event.Creator.Id)
                {
                    <div class="position-relative">
                        <!-- Edit Button -->
                        <button class="btn btn-sm btn-light position-absolute top-0 end-0 m-2" @onclick="OnEditTriggered">
                            <i class="bi bi-pencil-fill"></i>
                        </button>

                        <!-- Delete Button -->
                        <button class="btn btn-sm btn-light position-absolute top-0 end-0 me-5 m-2" @onclick="OnDeleteTriggered">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </div>
                }
                else
                {
                    <small class="text-muted">👥 @followersCount</small>
                }
            </div>
        </div>
    </div>

    <div class="card-footer bg-white border-top-0 px-4 pt-3">       
        <ul class="nav nav-tabs">
            @* <div class="d-flex justify-content-between mb-2"> *@
            <button class="btn btn-primary btn-sm" style="outline: none; box-shadow: none;" disabled="@(_currentUser != null && _currentUser.Id == Event.Creator.Id)">
                Attend | 256
            </button>
            @* </div> *@

            <li class="nav-item">
                <a class="nav-link @((_activeTab == "details") ? "active" : "")" @onclick="@(() => SetActiveTab("details"))">Details</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((_activeTab == "comments") ? "active" : "")" @onclick="@(() => SetActiveTab("comments"))">Comments</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((_activeTab == "chat") ? "active" : "")" @onclick="@(() => SetActiveTab("chat"))">Chat</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((_activeTab == "share") ? "active" : "")" @onclick="@(() => SetActiveTab("share"))">Share</a>
            </li>
        </ul>

        <div class="p-3 border rounded-bottom rounded-end" style=@_showTabContent>
            @if (_activeTab == "details")
            {
                <p><strong>Event Description:</strong> This is a placeholder for event details. Add location, time, rules, etc.</p>
            }
            else if (_activeTab == "comments")
            {
                <p><strong>User Comments:</strong> This section will show user-generated comments and discussions.</p>
            }
            else if (_activeTab == "chat")
            {
                <p><strong>Direct Chat:</strong> Allow users to Chat the promoter directly about this event.</p>
            }
            else if (_activeTab == "share")
            {
                <p><strong>Share Options:</strong> Link to social media share, copy link, etc.</p>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Event Event { get; set; }
    [Parameter]
    public EventCallback<string> OnEdit { get; set; }
    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    private UserModel? _currentUser = null;

    private string _activeTab = "";
    private string _showTabContent = "display:none";

    private string _timeZone = string.Empty;

    private int attendanceCount = 256;
    private int followersCount = 200;
    private int rating = 3;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _currentUser = await _AuthStateProvider.GetCurrentUserState();

            if (_currentUser == null || _currentUser.Id != Event.Creator.Id)
            {
                if (Event.Currency != null)
                {
                    await ConvertCurrencyAsync(Event);
                }

                Event.StartDate = SetLocalTimeZone(Event.StartDate, Event.TimeZone);
                if (Event.EndDate != null)
                {
                    Event.EndDate = SetLocalTimeZone((DateTime)Event.EndDate, Event.TimeZone);
                }
            }
            else
            {
                _timeZone = Regex.Match(TimeZoneInfo.FindSystemTimeZoneById(Event.TimeZone).DisplayName, @"\(UTC[^\)]+\)").ToString();
            }

            StateHasChanged();
        }
    }

    private async Task OnEditTriggered()
    {
        _navigationManager.NavigateTo($"/promote?eventId={Event.Id}");
        await OnEdit.InvokeAsync("promote");
    }

    private async Task OnDeleteTriggered(MouseEventArgs args)
    {
        await OnDelete.InvokeAsync(Event.Id);       
    }

    private void SetActiveTab(string tab)
    {
        if(_activeTab == tab)
        {
            _activeTab = "";
            _showTabContent = "display:none";
        }
        else
        {
            _activeTab = tab;
            _showTabContent = "display:block";
        }        
    }

    static async Task ConvertCurrencyAsync(Event currentEvent)
    {
        CultureInfo currentCulture = CultureInfo.CurrentCulture;
        RegionInfo region = new RegionInfo(currentCulture.Name);   
        var apiKey = "61fdd6d6ef55dae6ba4adb9f";

        string url = $"https://v6.exchangerate-api.com/v6/{apiKey}/pair/{currentEvent.Currency.ToUpper()}/{region.ISOCurrencySymbol}/{currentEvent.Price.ToString().Replace(",", ".")}";

        using var client = new HttpClient();

        string response = await client.GetStringAsync(url);
        using JsonDocument doc = JsonDocument.Parse(response);

        if (doc.RootElement.TryGetProperty("conversion_result", out var result))
        {
            decimal converted = result.GetDecimal();
            currentEvent.Price = converted;
            currentEvent.Currency = region.CurrencySymbol;
        }
    }

    private DateTime SetLocalTimeZone(DateTime originalTime, string timezone)
    {
        // Step 1: Original time
        TimeZoneInfo sourceTimeZone = TimeZoneInfo.FindSystemTimeZoneById(timezone);

        // Step 2: Local time zone (machine's local time zone)
        TimeZoneInfo localTimeZone = TimeZoneInfo.Local;

        // Step 3: Convert to local time
        DateTime localTime = TimeZoneInfo.ConvertTime(originalTime, sourceTimeZone, localTimeZone);

        // Step 4: Output
        return localTime;
    }
    
 
}