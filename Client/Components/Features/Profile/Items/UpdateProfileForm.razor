@inject ILogger<UpdateProfileForm> _logger
@inject NavigationManager _navigationManager
@inject JWTAuthenticationStateProvider _authStateProvider
@inject IUserService _userService


<div class="fixed inset-0  flex items-center justify-center @($"popup absolute bg-transparent rounded-lg shadow-xl z-1 {(IsVisible ? "block" : "hidden")}")">
    <EditForm Model="@Profile" OnValidSubmit="UpdateProfile" class="grid grid-cols-1 md:grid-cols-2 gap-6 bg-white p-8 rounded-lg shadow-sm border mb-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mx-auto bg-white p-8 rounded-lg shadow-sm border mb-3">
            <h1 class="text-2xl font-bold text-gray-800 mb-6">Profile Information</h1>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="userName">
                        User Name
                    </label>
                    <InputText id="userName" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="Profile.UserName" />
                    <ValidationMessage For="@(() => Profile.UserName)" />
                </div>



                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="first-name">
                        First Name
                    </label>
                    <InputText id="first-name" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="Profile.FirstName" />
                    <ValidationMessage For="@(() => Profile.FirstName)" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="last-name">
                        Last Name
                    </label>
                    <InputText id="last-name" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="Profile.LastName" />
                    <ValidationMessage For="@(() => Profile.LastName)" />
                </div>
            </div>
        </div>

        <div class="mx-auto bg-white p-8 rounded-lg shadow-sm border mb-3">
            <h1 class="text-2xl font-bold text-gray-800 mb-6">Address</h1>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="address">
                        Address
                    </label>
                    <InputText id="address" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="_location.Address" />
                    <ValidationMessage For="@(() => _location.Address)" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="city">
                        City
                    </label>
                    <InputText id="city" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="_location.City" />
                    <ValidationMessage For="@(() => _location.City)" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="province">
                        Province
                    </label>
                    <InputText id="province" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="_location.Province" />
                    <ValidationMessage For="@(() => _location.Province)" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1" for="country">
                        Country
                    </label>
                    <InputText id="country" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm" @bind-Value="_location.Country" />
                    <ValidationMessage For="@(() => _location.Country)" />
                </div>
            </div>
        </div>

        <div class="mt-8 flex justify-end space-x-3">
            <button type="button" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50" @onclick="TogglePopup">
                Cancel
            </button>
            <button type="submit" class="px-4 py-2 bg-pink-500 hover:bg-pink-600 text-white rounded-md text-sm font-medium" @onclick="UpdateProfile">
                Update Profile
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public UserModel Profile { get; set; }
    [Parameter]
    public EventCallback<bool> IsPopupVisible { get; set; }
    [CascadingParameter]
    public bool IsVisible { get; set; }


    LocationModel? _location = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _location = Profile.Location;
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            Profile.Location = _location;
            await _userService.UpdateUserProfileAsync(Profile);

        }
        catch (InvalidOperationException ex)
        {
            _logger.LogError(ex, "API error in GetEvent");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Client logic error in GetEvent");
        }

        TogglePopup();
    }

    private void TogglePopup()
    {
        IsPopupVisible.InvokeAsync(false);
    }
}
