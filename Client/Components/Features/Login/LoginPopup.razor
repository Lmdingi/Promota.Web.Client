@inject IAuthService _authService
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject ILogger<LoginPopup> _logger

<EditForm Model="@_loginModel" OnValidSubmit="OnLogin">
    <DataAnnotationsValidator />

    <div class="modal-backdrop fade show"></div>    

    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login</h5>
                    <button type="button" class="btn-close" @onclick="OnCancel"></button>
                </div>

                <div class="modal-body">

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger">@_errorMessage</div>
                    }

                    <div class="mb-3">
                        <input class="form-control" @bind="_loginModel.Email" placeholder="Email" />
                        <ValidationMessage For="@(() => _loginModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <input type="password" class="form-control" @bind="_loginModel.Password" placeholder="Password" />
                        <ValidationMessage For="@(() => _loginModel.Password)" />
                    </div>

                    <div class="d-flex justify-content-between small">
                        <a href="#" @onclick="ForgotPasswordClicked">Forgot password?</a>
                        <a href="#" @onclick="RegisterClicked">Sign up</a>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public EventCallback<bool> ShowLoginPopup { get; set; }

    private string _errorMessage = string.Empty;
    private LoginRequestDto _loginModel = new();

    private async Task OnLogin()
    {
        try
        {
            var status = await _authService.LoginAsync(_loginModel);
            if (!status)
            {
                throw new Exception();
            }

            await ShowLoginPopup.InvokeAsync(true);

        }
        catch (InvalidOperationException ex)
        {
            _logger.LogError($"Login failed: {ex.Message}", ex);
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _logger.LogError($"Login failed: {ex.Message}", ex);
            _errorMessage = "Login failed: An unexpected error occurred.";
        }
    }

    private async Task OnCancel()
    {
        await ShowLoginPopup.InvokeAsync(false);
    }




    private void RegisterClicked()
    {
        // TODO: Navigate to a register modal or open another component
        Console.WriteLine("Register clicked");
    }

    private void ForgotPasswordClicked()
    {
        // TODO: Navigate to forgot password modal or show message
        Console.WriteLine("Forgot Password clicked");
    }
}
