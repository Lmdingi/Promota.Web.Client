@inject IAuthService _authService
@inject JWTAuthenticationStateProvider _AuthStateProvider


    <div class="modal-backdrop fade show"></div>

    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login</h5>
                    <button type="button" class="btn-close" @onclick="OnCancel"></button> 
                </div>

                <div class="modal-body">
                    <div class="mb-3">
                        <input class="form-control" @bind="Email" placeholder="Email" />
                    </div>
                    <div class="mb-3">
                        <input type="password" class="form-control" @bind="Password" placeholder="Password" />
                    </div>

                    <div class="d-flex justify-content-between small">
                        <a href="#" @onclick="ForgotPasswordClicked">Forgot password?</a>
                        <a href="#" @onclick="RegisterClicked">Sign up</a>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    <button class="btn btn-primary" @onclick="Login">Login</button>
                </div>
            </div>
        </div>
    </div>


@code {
    // props
    [Parameter] public EventCallback<bool> ReloadNav { get; set; }
    [Parameter] public EventCallback<bool> ShowLoginPopup { get; set; }

    // fields
    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    // ctors

    // methods
    private async Task Login()
    {
        // TODO: Add your login logic here
        var status = await _authService.Login(Email, Password);

        await ReloadNav.InvokeAsync(status);
        await ShowLoginPopup.InvokeAsync(!status);
    }

    private async Task OnCancel()
    {
        await ShowLoginPopup.InvokeAsync(false);
    }




    private void RegisterClicked()
    {
        // TODO: Navigate to a register modal or open another component
        Console.WriteLine("Register clicked");
    }

    private void ForgotPasswordClicked()
    {
        // TODO: Navigate to forgot password modal or show message
        Console.WriteLine("Forgot Password clicked");
    }
}
