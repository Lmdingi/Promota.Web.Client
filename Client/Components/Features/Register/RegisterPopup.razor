@inject IAuthService _authService
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject ILogger<LoginPopup> _logger

<EditForm Model="@_registerModel" OnValidSubmit="OnRegister">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="modal-backdrop fade show"></div>

    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Register</h5>
                    <button type="button" class="btn-close" @onclick="OnCancel"></button>
                </div>

                <div class="modal-body">

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger">@_errorMessage</div>
                    }

                    <div class="mb-3">
                        <input class="form-control" @bind="_registerModel.Email" placeholder="Email" />
                        <ValidationMessage For="@(() => _registerModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <input class="form-control" @bind="_registerModel.UserName" placeholder="Username" />
                        <ValidationMessage For="@(() => _registerModel.UserName)" />
                    </div>

                    <div class="mb-3">
                        <input type="password" class="form-control" @bind="_registerModel.Password" placeholder="Password" />
                        <ValidationMessage For="@(() => _registerModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <input type="password" class="form-control" @bind="_registerModel.ConfirmPassword" placeholder="Confirm Password" />
                        <ValidationMessage For="@(() => _registerModel.ConfirmPassword)" />
                    </div>

                    <div class="d-flex justify-content-between small">
                        <p>You have an account?</p>
                        <a href="#" @onclick="LoginClicked">Login</a>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Register</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public EventCallback<bool> ShowRegisterPopup { get; set; }

    private string _errorMessage = string.Empty;
    private RegisterRequestDto _registerModel = new();

    private async Task OnRegister()
    {
        try
        {
            // var confirmationUrl = await _authService.RegisterAsync(_registerModel);

            // if (string.IsNullOrWhiteSpace(confirmationUrl))
            // {
            //     // popup login

            //     // take user to update profile
            // }

            await ShowRegisterPopup.InvokeAsync(false);

        }
        catch (InvalidOperationException ex)
        {
            _logger.LogError($"Register failed: {ex.Message}", ex);
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _logger.LogError($"Login failed: {ex.Message}", ex);
            _errorMessage = "Register failed: An unexpected error occurred.";
        }
    }

    private async Task OnCancel()
    {
        await ShowRegisterPopup.InvokeAsync(false);
    }




    private void LoginClicked()
    {
        // TODO: Navigate to a register modal or open another component
        Console.WriteLine("Register clicked");
    }

    private void ForgotPasswordClicked()
    {
        // TODO: Navigate to forgot password modal or show message
        Console.WriteLine("Forgot Password clicked");
    }
}
