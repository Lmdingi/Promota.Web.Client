@inject NavigationManager _nav

﻿<div class="d-flex gap-2">
    <button class="btn btn-primary" @onclick="OnSignIn">Sign In</button>
    <button class="btn btn-outline-primary" @onclick="OnRegisterIn">Register</button>
</div>

@if (_showLoginPopup)
{
    <LoginPopup ShowLoginPopup="@OnReloadLoginPopup"></LoginPopup>
}

@if (_showRegisterPopup)
{
    <RegisterPopup ShowRegisterPopup="OnReloadRegisterPopup"></RegisterPopup>
}



@code {
    [Parameter] public EventCallback<Alert> OnNavReload { get; set; }

    private bool _showLoginPopup;
    private bool _showRegisterPopup;

    private void OnSignIn()
    {
        _showLoginPopup = true;
    }

    private void OnRegisterIn()
    {
        _showRegisterPopup = true;
    }

    private async Task OnReloadLoginPopup(bool isLoginSuccessful)
    {
        _showLoginPopup = false;
        StateHasChanged();

        if (isLoginSuccessful)
        {
            await OnNavReload.InvokeAsync(new Alert("Login Successful", "You have logged in successfully.", AlertType.Success));
        }

    }

    private async Task OnReloadRegisterPopup(bool isRegisterSuccessful)
    {
        _showRegisterPopup = false;
        StateHasChanged();

        if (isRegisterSuccessful)
        {
            await OnNavReload.InvokeAsync(new Alert("Register Successful", "You're all set! You can now start exploring.", AlertType.Success));
        }        
    }
}
