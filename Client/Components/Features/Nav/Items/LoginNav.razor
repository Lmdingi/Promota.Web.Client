@attribute [Authorize]
@rendermode InteractiveServer
@inject INavService _navService

<AuthorizeView>
    ﻿<div class="d-flex align-items-center gap-3 p-2">
        <button class="btn btn-primary d-flex align-items-center gap-1">
            <i class="bi bi-calendar-plus"></i> Promote
        </button>

        <button class="btn btn-outline-success d-flex align-items-center gap-1">
            <i class="bi bi-calendar2-check"></i> Going
        </button>

        <span class="fw-semibold">Welcome, @CurrentUser?.UserName</span>

        <button class="btn position-relative">
            <i class="fas fa-bell"></i>
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                3
                <span class="visually-hidden">unread notifications</span>
            </span>
        </button>

        <div class="profile-container" @onclick="ToggleProfileMenu" style="position: relative; display: inline-block;">
            <img src="@CurrentUser?.ProfilePictureUrl" alt="Profile" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover; cursor: pointer;" />

            @if (_isProfileMenuOpen)
            {
                <ProfileMenu></ProfileMenu>
            }
        </div>    
        
        @if (_isProfileMenuOpen)
        {
            <div class="position-fixed top-0 start-0 w-100 h-100" @onclick="CloseMenu" style="z-index: 999;"></div>
        }
    </div>
</AuthorizeView>

@code {
    // props
    [CascadingParameter(Name = "CurrentUser")]
    public User? CurrentUser { get; set; }

    // fields
    private bool _isProfileMenuOpen = false;

    // methods
    private void ToggleProfileMenu()
    {
        _isProfileMenuOpen = !_isProfileMenuOpen;
    }

    private void CloseMenu()
    {
        _isProfileMenuOpen = false;
    }
}
