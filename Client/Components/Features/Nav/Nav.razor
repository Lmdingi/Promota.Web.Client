@rendermode InteractiveServer
@attribute [Authorize]
@inject IAuthService _authService
@inject NavigationManager _nav
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject IAccessTokenService _AccessTokenService
@inject IAuthService _AuthService
@inject IResourceService _ResourceService

@if (CurrentUser == null || !CurrentUser.IsAuthenticated)
{
	@* shows when not loged-in *@
	<LogoutNav ReloadNav="@OnReloadNav"></LogoutNav>
}
else
{	
	@* shows when loged-in *@
	<CascadingValue Value="@CurrentUser" Name="CurrentUser">
		<LoginNav ReloadNav="@OnReloadNav"></LoginNav>
	</CascadingValue>
}

@code {
	// props	
	public User? CurrentUser { get; set; }

	// fields
	private bool _showLoginPopup;

	// methods
	protected override async Task OnInitializedAsync()
	{
		CurrentUser = await _AuthStateProvider.GetCurrentUserState();
	}

	private async Task OnReloadNav(bool isAuthenticated)
	{
		if (isAuthenticated)
		{
			CurrentUser = await _AuthStateProvider.GetCurrentUserState();
		}
		else
		{
			CurrentUser = null;
		}
		StateHasChanged();
	}
}
