@rendermode InteractiveServer
@attribute [Authorize]
@inject IAuthService _authService
@inject NavigationManager _nav
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject IAccessTokenService _AccessTokenService
@inject IAuthService _AuthService
@inject IResourceService _ResourceService

@if (_currentUser == null || !_currentUser.IsAuthenticated)
{
	<LogoutNav OnNavReload="@HandleNavReload"></LogoutNav>
}
else
{	
	<LoginNav OnNavReload="@HandleNavReload"></LoginNav>
}

@if(Alert != null)
{
	<AlertModal Alert="@Alert" OnAlertChanged="HandleAlertChanged"></AlertModal>
}

@code {
	public Alert? Alert { get; set; }

	private User? _currentUser = null;
	private bool _showLoginPopup;

	protected override async Task OnInitializedAsync()
	{
		_currentUser = await _AuthStateProvider.GetCurrentUserState();
	}

	private async Task HandleNavReload(Alert alert)
	{
		if (alert.Title == "Logout Successful")
		{
			_currentUser.IsAuthenticated = false;
		}
		else
		{
			_currentUser = await _AuthStateProvider.GetCurrentUserState();
		}

		await HandleAlertChanged(alert);
	}

	private async Task HandleAlertChanged(Alert? alert)
	{
		Alert = alert;
		StateHasChanged();

		if (alert != null && alert.Type == AlertType.Success)
		{
			await Task.Delay(3000);
			Alert = null;
			StateHasChanged();
		}
	}
}
