@rendermode InteractiveServer
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject NavigationManager _navigationManager
@inject GlobalEventCallBacks _globalEventCallBacks

<header class="bg-white shadow-sm" style="position: fixed; top: 0; width: 100vw;">
    <div class="container mx-auto px-4 py-3 flex justify-between items-center border-bottom border-gray-200">
        <div class="flex items-center space-x-2">
            <a class="flex items-center space-x-2" href="/">
                <span class="material-icons text-pink-500 text-3xl">local_activity</span>
                <span class="text-2xl font-bold text-gray-800">PROMOTA</span>
            </a>
        </div>

        @if (_userModel == null || !_userModel.IsAuthenticated)
        {
            <UnAuthorizedUserNav></UnAuthorizedUserNav>
        }
        else
        {
            <CascadingValue Value="_userModel">
                <AuthorizedUserNav></AuthorizedUserNav>
            </CascadingValue>   
        }

    </div>
</header>

@code {
    public UserModel? _userModel;

    protected async override Task OnInitializedAsync()
    {
        _globalEventCallBacks.OnGetCurrentUserStateForNav += HandleGetCurrentUserState;
        HandleGetCurrentUserState();
    }

    private void HandleGetCurrentUserState()
    {
        _ = InvokeAsync(async () =>
        {
            _userModel = await _AuthStateProvider.GetCurrentUserState();
            StateHasChanged();
        });
    }
}