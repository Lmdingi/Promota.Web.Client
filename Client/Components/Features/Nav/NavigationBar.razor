@rendermode InteractiveServer
@inject JWTAuthenticationStateProvider _AuthStateProvider
@inject NavigationManager _navigationManager
@inject GlobalEventCallBacks _globalEventCallBacks
@implements IDisposable

<header class="bg-white shadow-sm" style="position: fixed; top: 0; width: 100vw;">
    <div class="container mx-auto px-4 py-3 flex justify-between items-center border-bottom border-gray-200">
        <div class="flex items-center space-x-2">
            <a class="flex items-center space-x-2" href="/">
                <span class="material-icons text-pink-500 text-3xl">local_activity</span>
                <span class="text-2xl font-bold text-gray-800">PROMOTA</span>
            </a>
        </div>

        @if (_userModel != null && _userModel.IsAuthenticated)
        {
            <CascadingValue Value="_userModel" Name="UserModel" IsFixed="false">
                <AuthorizedUserNav></AuthorizedUserNav>
            </CascadingValue>

        }
        else
        {
            <UnAuthorizedUserNav></UnAuthorizedUserNav>
        }

    </div>
</header>

@code {
    private UserModel? _userModel = null;

    protected override async Task OnInitializedAsync()
    {
        _globalEventCallBacks.OnGetCurrentUserStateForNav += RefreshUser;
        _userModel = await _AuthStateProvider.GetCurrentUserState();
    }

    private async void RefreshUser()
    {
        _userModel = await _AuthStateProvider.GetCurrentUserState();
        StateHasChanged();
    }

    public void Dispose()
    {
        _globalEventCallBacks.OnGetCurrentUserStateForNav -= RefreshUser;
    }

    protected override void OnParametersSet()
    {
        // This will be triggered when _userModel changes
        Console.WriteLine("Nav User changed: " + _userModel?.IsAuthenticated);
    }
}