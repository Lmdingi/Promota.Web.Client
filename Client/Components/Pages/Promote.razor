@page "/promote"
@attribute [Authorize]
@rendermode InteractiveServer

<div class="card shadow-lg mb-4 border-0 rounded-4" >
   
    <div class="card-footer bg-white border-top-0 px-4 pt-3">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link @((activeTab == "promote") ? "active" : "")" @onclick="@(() => SetActiveTab("promote"))">Promote</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((activeTab == "events") ? "active" : "")" @onclick="@(() => SetActiveTab("events"))">Events</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((activeTab == "analytics") ? "active" : "")" @onclick="@(() => SetActiveTab("analytics"))">Analytics</a>
            </li>
        </ul>

        <div class="p-3 border rounded-bottom rounded-end">
            @if (activeTab == "promote")
            {
                <CreateEventForm OnAlertChanged="HandleAlertChanged"></CreateEventForm>
            }
            else if (activeTab == "events")
            {
                <MyEvents></MyEvents>
            }
            else if (activeTab == "analytics")
            {
                <p><strong>Analytics:</strong> Track attendance, views, engagement, and ratings per event. (future).</p>
            }
        </div>
    </div>
</div>

@if (Alert != null)
{
    <AlertModal Alert="@Alert" OnAlertChanged="HandleAlertChanged"></AlertModal>
}

@code {
    public Alert? Alert { get; set; }
    private string activeTab = "promote";

    private void SetActiveTab(string tab)
    {
        if (activeTab == tab)
        {
            activeTab = "";
        }
        else
        {
            activeTab = tab;
        }
    }

    private async Task HandleAlertChanged(Alert? alert)
    {
        Alert = alert;
        StateHasChanged();

        if (alert != null && alert.Type == AlertType.Success)
        {
            activeTab = "events";
            await Task.Delay(3000);
            Alert = null;
            StateHasChanged();
        }
    }
}
